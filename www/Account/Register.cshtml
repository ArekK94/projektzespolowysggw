@* Usuń tę sekcję, jeśli korzystasz z obsługi pakietów *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{

    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Zarejestruj się";

    // Inicjowanie ogólnych zmiennych strony
    var username = "";
    var userPassword = "";
    var confirmPassword = "";
    string responseString = "";
    string title = "Utwórz nowe konto.";
    // Konfiguracja weryfikacji
    Validation.RequireField("username", "username nie może być pusty.");
    Validation.RequireField("userPassword", "userPassword nie może być puste.");
    Validation.RequireField("confirmPassword", "Potwierdzenie hasła nie może być puste.");
    Validation.Add("username", Validator.StringLength(20, 2, "username musi mieć minimum 2 znaki i max 20"));
    Validation.Add("confirmPassword",
    Validator.EqualsTo("userPassword", "userPassword i potwierdzenie hasła są niezgodne."));
    Validation.Add("userPassword",
        Validator.StringLength(
            maxLength: 50,
            minLength: 6,
            errorMessage: "userPassword musi mieć co najmniej 6 znaków i max 50."));

    // W przypadku żądania POST weryfikacja i przetwarzanie danych
    if (IsPost) {
        AntiForgery.Validate();

        username = Request.Form["username"];
        userPassword = Request.Form["userPassword"];
        confirmPassword = Request.Form["confirmPassword"];

        using (var client = new WebClient())
        {
            var values = new System.Collections.Specialized.NameValueCollection();
            values["password"] = "OstryZBaraninaNaC13nk1m!";
            values["function"] = "register";
            values["username"] = username;
            values["userPassword"] = userPassword;


            var response = client.UploadValues("http://kasynobackend-wygoda.rhcloud.com/backend/user", values);

            responseString = System.Text.Encoding.Default.GetString(response);
            Newtonsoft.Json.Linq.JObject jsonPOST = Newtonsoft.Json.Linq.JObject.Parse(responseString);
            if ((string)jsonPOST["error"] != "")
            {
                title = (string)jsonPOST["error"];
            }
            if ((string)jsonPOST["status"] == "OK")
            {
                title = "Rejestracja przebiegła pomyślnie";
                Response.AddHeader("REFRESH", "3;URL=login");
            }

        }
    }

}

<hgroup class="title">
    <h1>@title</h1>
</hgroup>

<form method="post">
    @AntiForgery.GetHtml()
    @* Jeśli istnieje co najmniej jeden błąd weryfikacji, powiadomienie użytkownika *@
    @Html.ValidationSummary("Próba utworzenia konta nie powiodła się. Popraw błędy i ponów próbę.", excludeFieldErrors: true, htmlAttributes: null)
    @*<input type="hidden" id="password" name="password" value="@kluczdostepu" />
    <input type="hidden" id="function" name="function" value="@funkcja" />*@
    <fieldset>
        <legend>Formularz rejestracji</legend>
        <ol>
            <li class="username">
                <label>username</label>
                <input type="text" id="username" name="username" value="@username" @Validation.For("username") />
                @* Wypisanie wszelkich błędów weryfikacji usernameu na stronie *@
                @Html.ValidationMessage("username")
            </li>
            <li class="userPassword">
                <label for="userPassword" @if(!ModelState.IsValidField("userPassword")) {<text>class="error-label"</text>}>userPassword</label>
                <input type="password" id="userPassword" name="userPassword" @Validation.For("userPassword") />
                @* Wypisanie wszelkich błędów weryfikacji hasła na stronie *@
                @Html.ValidationMessage("userPassword")
            </li>
            <li class="confirm-password">
                <label for="confirmPassword" @if(!ModelState.IsValidField("confirmPassword")) {<text>class="error-label"</text>}>Potwierdź userPassword</label>
                <input type="password" id="confirmPassword" name="confirmPassword" @Validation.For("confirmPassword") />
                @* Wypisanie wszelkich błędów weryfikacji hasła na stronie *@
                @Html.ValidationMessage("confirmPassword")
            </li>

        </ol>
        <input type="submit" value="Zarejestruj się" />
    </fieldset>
</form>